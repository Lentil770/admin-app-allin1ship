[{"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\index.js":"1","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\App.js":"2","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\CreateRoute.js":"3","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\EditDefaultRoute.js":"4","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\topBar.js":"5","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\AddDriver.js":"6","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\AddCustomer.js":"7","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\AddVehicle.js":"8","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\EditCustomer.js":"9","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayFeedback.js":"10","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayTimestamps.js":"11","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayStartTimes.js":"12","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayCurrentRoute.js":"13","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\CreateSchedule.js":"14","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\EditSchedule.js":"15"},{"size":254,"mtime":1612382364269,"results":"16","hashOfConfig":"17"},{"size":2134,"mtime":1614204881946,"results":"18","hashOfConfig":"17"},{"size":8185,"mtime":1612463896595,"results":"19","hashOfConfig":"17"},{"size":9917,"mtime":1614206827696,"results":"20","hashOfConfig":"17"},{"size":1772,"mtime":1614811968283,"results":"21","hashOfConfig":"17"},{"size":1421,"mtime":1614812798994,"results":"22","hashOfConfig":"17"},{"size":2946,"mtime":1612463896594,"results":"23","hashOfConfig":"17"},{"size":2174,"mtime":1612463896595,"results":"24","hashOfConfig":"17"},{"size":5155,"mtime":1618352935497,"results":"25","hashOfConfig":"17"},{"size":1984,"mtime":1612463896597,"results":"26","hashOfConfig":"17"},{"size":1975,"mtime":1612463896598,"results":"27","hashOfConfig":"17"},{"size":1926,"mtime":1612463896597,"results":"28","hashOfConfig":"17"},{"size":6509,"mtime":1613421204482,"results":"29","hashOfConfig":"17"},{"size":24378,"mtime":1618343296452,"results":"30","hashOfConfig":"17"},{"size":20669,"mtime":1614607746083,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1yrp2bo",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\index.js",[],["65","66"],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\App.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\CreateRoute.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\EditDefaultRoute.js",["67"],"import React from 'react';\r\n\r\nclass EditDefaultRoute extends React.Component {\r\n    state = {\r\n        routes: [{\r\n            \"id\": 1\r\n        },\r\n           {\"id\": 2\r\n        }],\r\n        routeData: null,\r\n        selectedRoute: '1',\r\n        customersList: (givenData) => givenData && givenData.map((customer) => \r\n            <option key={customer.customer_id} value={customer.customer_id} >{customer.customer_name}</option>\r\n            ),\r\n        customersListB: (givenData) => givenData && givenData.map((customer) => \r\n            `<option key=${customer.customer_id} value=${customer.customer_id} >${customer.customer_name}</option>`\r\n            )\r\n    }\r\n\r\n    getRouteData = () => {\r\n        this.setState({routeData: null});\r\n        const url = \"https://allin1ship.herokuapp.com/defaultRouteDisplay/\" + document.getElementById(\"selectRoute\").value;\r\n        console.log(url);\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            this.setState({routeData: json, routeTableData: []})\r\n            console.log(json);\r\n            //this.getTasks(json.map((obj) => obj.id))\r\n        }).then(() => this.setRouteTableData())\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    getRoutes = () => {\r\n        fetch(\"https://allin1ship.herokuapp.com/getNumberRoutes\")\r\n        .then(response => response.json())\r\n        .then(json => this.setState({routes: json}))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    getCustomersData = () => {\r\n        console.log('getcustoemrsdata running');\r\n        const url = \"https://allin1ship.herokuapp.com/getCustomersData\";\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(json => this.setState({customersData: json}))\r\n        .then(() => console.log(this.state))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componentDidMount');\r\n        this.getRoutes();\r\n        this.getCustomersData();\r\n    }\r\n    \r\n    postStopChanges = (i) => {\r\n        console.log('poststopchanges running, i:', i, this.state.selectedRoute)\r\n        const stopData = {\r\n            key: i,\r\n            stop_number: document.getElementById(`stopNumber${i}`).innerText,\r\n            customer_id: document.getElementById(`customerSelect${i}`).value,\r\n            notes: document.getElementById(`notes${i}`).innerText\r\n        };\r\n        console.log(JSON.stringify(stopData));\r\n        fetch(`https://allin1ship.herokuapp.com/postStopChanges/${this.state.selectedRoute}`, {\r\n            method: \"POST\",  \r\n            headers: {\r\n                \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(stopData)\r\n        }).then(response =>  {\r\n            console.log(response);\r\n            if (response.ok) {\r\n                alert('changes successfully sent')\r\n            }\r\n            return response.json();\r\n    })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('handlesubmitrunning');\r\n        //CHANGE THIS, PROB CHANGE ENDPOINT TO DLETE PREV, AND POST ALL NEW\r\n        //i think i have to work backwards from the server- figure out how to delete the old stops and post all new ones and then figute out how i need to send the new data.\r\n        for (let i=1;i<=this.state.routeData.length;i++) {\r\n            this.postStopChanges(i)\r\n        }\r\n    }\r\n\r\n    postScheduleStops = (i) => {\r\n        //for line in taskbox, run this.postStopTask(task, schedule_stop_id)\r\n        const postStopData = {\r\n            stopNumber:  document.getElementById(`stopNumber${i}`).innerText,\r\n            routeId: `${this.state.selectedRoute}`, ////where to get scheduleId from??\r\n            customerId: document.getElementById(`customerSelect${i+1}`).value// in state needs to be set from dropdown value?\r\n        } \r\n        console.log('handlesubmitstop', JSON.stringify(postStopData));\r\n        fetch(\"https://allin1ship.herokuapp.com/postScheduleStops\", {\r\n            method: \"POST\",  \r\n            headers: {\r\n                \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(postStopData)\r\n        }).then((response) => {\r\n            if(response.ok) {\r\n                return response.json()\r\n            }\r\n            else {throw new Error(response.statusText) }\r\n        }).then(json => this.postStopTask(document.getElementById(`tasks${i+1}`).value, json))\r\n    }\r\n\r\n/*\r\n    handleTextChange = (e) => {\r\n        this.setState({selectedDropOffInfo: e.target.value})\r\n    }\r\n*/\r\n\r\n    addRouteRow = () => {\r\n        this.setState({routeTableData: [], routeData: [...this.state.routeData, {stop_number: this.state.routeTableData.length + 1}]}, this.setRouteTableData)\r\n    }\r\n\r\n    handleRouteChange = (e) => {\r\n        //console.log(document.getElementById(\"selectRoute\").value)\r\n        this.setState({selectedRoute: e.target.value})\r\n        this.getRouteData()\r\n    }\r\n\r\n    deleteRouteRow = (e, rowNumber) => {\r\n        e.preventDefault()\r\n        const { routeData } = this.state;\r\n        const filteredRouteData = routeData.filter((route) => route.stop_number !== rowNumber)\r\n        for (let i=0;i<filteredRouteData.length;i++){\r\n            filteredRouteData[i].stop_number = i+1\r\n        }\r\n        console.log(filteredRouteData);\r\n        this.setState({routeData: filteredRouteData, routeTableData: []}, this.setRouteTableData)\r\n        this.setState({[`tasks${rowNumber}`]: null})\r\n        for (let i=rowNumber;i<=routeData.length;i++) {\r\n            this.setState({[`tasks${i}`]: this.state[`tasks${i+1}`]})\r\n        }\r\n    }\r\n\r\n    setRouteTableData = () => {\r\n        //this.setState({routeTableData: []})\r\n        //\r\n        const { routeData } = this.state;\r\n        console.log(routeData);\r\n        let arrayToRender = []\r\n        for (let i=0;i<routeData.length;i++) {\r\n            let tableRow = (<tr key={routeData[i].stop_number} id={`${routeData[i].stop_number}`} \r\n                draggable={true} \r\n                \r\n                onDragStart={this.handleDrag} \r\n                onDrop={this.handleDrop}>\r\n                <td id={`stopNumber${routeData[i].stop_number}`}>{routeData[i].stop_number}</td>\r\n                <td id={routeData[i].stop_number}><select id={`customerSelect${routeData[i].stop_number}`}><option key='0' value={routeData[i].customer_id} >{routeData[i].customer_name}</option>{this.state.customersData && this.state.customersList(this.state.customersData)}</select></td>\r\n                {/*<td><textarea onChange={tasktext => this.setState({[`tasks${routeData[i].stop_number}`]: tasktext.target.value })}\r\n                    rows='3' cols='35' id={`tasks${routeData[i].stop_number}`} defaultValue={this.state[`tasks${routeData[i].stop_number}`] && this.state[`tasks${routeData[i].stop_number}`]} name={`taskTextArea${routeData[i].stop_number}`}\r\n                ></textarea></td> */}\r\n                <input type='button' onClick={(e) => this.deleteRouteRow(e, routeData[i].stop_number)} value='delete row' />\r\n            </tr>) \r\n            arrayToRender.push(tableRow)\r\n        }\r\n        this.setState({routeTableData: arrayToRender})\r\n    }\r\n\r\n    render() {\r\n        /*left in if wabnt to copy\r\n        const optionsDrivers = this.state.drivers && this.state.drivers.map((driver) => \r\n            <option key={driver.driver}>{driver.driver}</option>\r\n        );*/\r\n        const tableRouteData = this.state.routeData && this.state.routeData.map((stop) => \r\n            <tr >\r\n                <td id={`stopNumber${stop.stop_number}`}>{stop.stop_number}</td>\r\n                <td id={`customer${stop.stop_number}`}><select id={`customerSelect${stop.stop_number}`}><option key='0' value={stop.customer_id} >{stop.customer_name}</option>{this.state.customersData && this.state.customersList(this.state.customersData)}</select></td>\r\n                <td contentEditable=\"true\" id={`notes${stop.stop_number}`} >{stop.notes}</td> \r\n                {/*<input type='text' id={stop.stop_number} defaultValue={stop.comments} onChange={() => this.handleComment}></input>\r\n                <button type='button' onClick={() => this.handleCommentButton(stop.stop_number, document.getElementById(`notes${stop.notes}`).innerText)}>submit changes</button>*/}\r\n            </tr>  \r\n        )\r\n\r\n        const optionsRoutes = this.state.routes && this.state.routes.map((route) => \r\n        <option key={route.id} value={route.id}>{route.id} - {route.route_name}</option>\r\n    );\r\n        //const selectedRouteName = document.getElementById('selectRoute').value;\r\n        //console.log(selectedRouteName);\r\n        return <div style={{padding: '15px'}}>            \r\n             <main className='EditDefaultRoute'>\r\n\r\n                <form name='editDefaultRoute' onSubmit={this.handleSubmit}>\r\n                <br/><legend>Edit Route</legend><br/>\r\n                   \r\n                    <select id='selectRoute' onChange={this.handleRouteChange}>\r\n                        <option value=\"\" selected disabled hidden>Choose Route</option>\r\n                        {optionsRoutes}\r\n                    </select><br/>\r\n\r\n                    <table>\r\n                        <thead>\r\n                            <tr><th>selected route #:{this.state.selectedRoute}</th></tr>\r\n                            {this.state.routeData && <tr>\r\n                                <th>Stop #</th>\r\n                                <th>Address</th>\r\n                            </tr>}\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.routeTableData}\r\n                        </tbody>\r\n                       <button type='button' onClick={() => this.addRouteRow()}>add row</button>\r\n                    </table>\r\n\r\n                    <button type='submit'>SUBMIT</button><br/>\r\n                </form>\r\n            </main>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default EditDefaultRoute;","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\topBar.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\AddDriver.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\AddCustomer.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\AddVehicle.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\EditCustomer.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayFeedback.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayTimestamps.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayStartTimes.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\DisplayCurrentRoute.js",[],"C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\CreateSchedule.js",["68","69"],"import React from 'react';\r\nimport { Link, Route } from 'react-router-dom';\r\n\r\nclass CreateSchedule extends React.Component {\r\n    state = {\r\n        newScheduleNumber: '_',\r\n        drivers: null,\r\n        routes: [{\r\n            \"id\": 1\r\n        },\r\n           {\"id\": 2\r\n        }],\r\n        vehicles: null,\r\n        routeData: null,\r\n        selectedRoute: '',\r\n        selectedDate: new Date().toISOString().split('T')[0],\r\n        selectedDriver: null,\r\n        selectedVehicle: null,\r\n        routeTableData: [],\r\n        selectedDropOffInfo: 'Thank you for the hard work today, it is greatly appreciated. You’re the front line workers in our company and your hard work shows! Please park the van near the office. If you cannot find parking you can always use the driveway at 740 Montgomery St (The driveway is narrow so just be alert). Rest up, looking forward to seeing you at the next drive!',\r\n        customersList: (givenData) => givenData && givenData.map((customer) => \r\n            <option key={customer.customer_id} value={customer.customer_id} >{customer.customer_name}</option>\r\n            )\r\n    }\r\n\r\n    getNewScheduleNumber = () => {\r\n        //fetch length of route_list and sets newRouteNumber to it + 1\r\n        fetch(\"https://allin1ship.herokuapp.com/getNumberSchedules\")\r\n        .then(response => response.json())\r\n        .then(json => this.setState({newScheduleNumber: json[0][\"COUNT(*)\"] + 1}))\r\n        .then(() => console.log(this.state))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    getCustomersData = () => {\r\n        console.log('getcustoemrsdata running');\r\n        const url = \"https://allin1ship.herokuapp.com/getCustomersData\";\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(json => this.setState({customersData: json}))\r\n        .then(() => console.log(this.state))\r\n        .catch(err => console.log(err))\r\n    }\r\n/*\r\n    addRouteRowB = () => {\r\n        const { routeTableData } = this.state;\r\n        const tableRow = (<tr key={`stopNumber${routeTableData.length + 1}`}>\r\n            <td id={`stopNumber${routeTableData.length + 1}`}>{routeTableData.length + 1}</td>\r\n            <td id={routeTableData.length + 1}><select id={`customerSelect${routeTableData.length + 1}`}><option value=\"none\" selected disabled hidden> \r\n                        Select Customer\r\n                    </option>{this.state.customersData && this.state.customersList(this.state.customersData)}</select></td>\r\n            <td ><textarea onChange={tasktext => this.setState({[`tasks${routeTableData.length + 1}`]: tasktext })}\r\n                rows='3' cols='35' id={`tasks${routeTableData.length + 1}`}  value={this.state[`tasks${routeTableData.length + 1}`]} name={`taskTextArea${routeTableData.length + 1}`}\r\n            >\r\n            </textarea></td> \r\n            <input type='button' onClick={(e) => this.deleteRouteRow(e, routeTableData.length + 1)} value='delete row' />\r\n        </tr>)\r\n        this.setState({routeTableData: [...this.state.routeTableData, tableRow], routeData: [...this.state.routeData, {stop_number: routeTableData.length + 1}]})\r\n    }*/\r\n\r\n    addRouteRow = () => {\r\n        \r\n        this.setState({routeTableData: [], routeData: [...this.state.routeData, {stop_number: this.state.routeTableData.length + 1}]}, this.setRouteTableData)\r\n    }\r\n    /*deleteRouteRow = (rowNumber) => {\r\n        //somehow delete selected row from state. shdnt be too hard with stop_number\r\n        //NOT WOKRING - RIGHT NOW DELETES FIRST ROW...\r\n        console.log('deleterouterow');\r\n        console.log('befrore splice:', this.state.routeTableData);\r\n        let routeTableData = this.state.routeTableData.slice(rowNumber, 1).concat(this.state.routeTableData.slice(rowNumber));\r\n        this.setState({routeTableData})\r\n        console.log('aftersplice:', this.state.routeTableData);\r\n        \r\n    }*/\r\n\r\n    //tried to splice - WRONG FUNC RETURNS ONLY THE CUT OBJ. INDTEAD FILTERED.\r\n    deleteRouteRow = (e, rowNumber) => {\r\n        e.preventDefault()\r\n        const { routeData } = this.state;\r\n        const filteredRouteData = routeData.filter((route) => route.stop_number !== rowNumber)\r\n        for (let i=0;i<filteredRouteData.length;i++){\r\n            filteredRouteData[i].stop_number = i+1\r\n        }\r\n        console.log(filteredRouteData);\r\n        this.setState({routeData: filteredRouteData, routeTableData: []}, this.setRouteTableData)\r\n        this.setState({[`tasks${rowNumber}`]: null})\r\n        for (let i=rowNumber;i<=routeData.length;i++) {\r\n            this.setState({[`tasks${i}`]: this.state[`tasks${i+1}`]})\r\n        }\r\n    }\r\n    /*deleteRouteRow = (rowNumber) => {\r\n        console.log(rowNumber)\r\n        let rowToDelete = rowNumber + 1;\r\n        const { routeData } = this.state;\r\n        let i = routeData.length\r\n        while(i--) {\r\n            if (routeData[i]\r\n                && routeData[i].hasOwnProperty('stop_number')\r\n                && routeData[i]['stop_number'] === rowToDelete) {\r\n                    routeData.splice(i,1)\r\n                }  \r\n            }\r\n            this.setState({routeTableData: []}, this.setRouteTableData)\r\n        }*/\r\n        /*\r\n        console.log('deleting index:', routedata.findIndex(route => route.stop_number === rowNumber+1))\r\n        const splicedArray = routedata.splice(routedata.findIndex(route => route.stop_number === rowNumber+1), 1)\r\n        this.setState({routeData: splicedArray, routeTableData: []}, () => this.setRouteTableData())*/\r\n    \r\n    \r\n\r\n    setRouteTableData = () => {\r\n        //this.setState({routeTableData: []})\r\n        //\r\n        const { routeData } = this.state;\r\n        console.log(routeData);\r\n        let arrayToRender = []\r\n        for (let i=0;i<routeData.length;i++) {\r\n            let tableRow = (<tr key={routeData[i].stop_number} id={`${routeData[i].stop_number}`} \r\n                draggable={true} \r\n                \r\n                onDragStart={this.handleDrag} \r\n                onDrop={this.handleDrop}>\r\n                <td id={`stopNumber${routeData[i].stop_number}`}>{routeData[i].stop_number}</td>\r\n                <td id={routeData[i].stop_number}><select id={`customerSelect${routeData[i].stop_number}`}><option key='0' value={routeData[i].customer_id} >{routeData[i].customer_name}</option>{this.state.customersData && this.state.customersList(this.state.customersData)}</select></td>\r\n                <td><textarea onChange={tasktext => this.setState({[`tasks${routeData[i].stop_number}`]: tasktext.target.value })}\r\n                    rows='3' cols='35' id={`tasks${routeData[i].stop_number}`} defaultValue={this.state[`tasks${routeData[i].stop_number}`] && this.state[`tasks${routeData[i].stop_number}`]} name={`taskTextArea${routeData[i].stop_number}`}\r\n                ></textarea></td> \r\n                <input type='button' onClick={(e) => this.deleteRouteRow(e, routeData[i].stop_number)} value='delete row' />\r\n            </tr>) \r\n            arrayToRender.push(tableRow)\r\n        }\r\n        this.setState({routeTableData: arrayToRender})\r\n    }\r\n\r\n    formatTasks = (json, stopi) => {\r\n        let formatArray = [];\r\n        for (let i=0;i<json.length;i++) {\r\n            formatArray.push(json[i].task)\r\n        }\r\n        let formattedTasks = formatArray.join('\\n')\r\n\r\n        this.setState({[`tasks${stopi+1}`]: formattedTasks}) \r\n    }\r\n\r\n    /*getTasks = (stop_ids) => {    \r\n        console.log('stop_ids', stop_ids);    \r\n        this.setState({stopTasks: []})\r\n        for (let i=0;i<stop_ids.length;i++) {\r\n            console.log('stopid[i]=', stop_ids[i]);\r\n            const url = \"https://allin1ship.herokuapp.com/getRouteTasks/\" + stop_ids[i];\r\n            fetch(url)\r\n            .then(response => response.json())\r\n            .then(json => this.formatTasks(json, i))\r\n            .then(() => this.setRouteTableData())\r\n            .catch(err => console.log(err))\r\n        }\r\n        console.log('finished fetching stops tasks', this.state);\r\n    }*/\r\n\r\n    getRouteData = () => {\r\n        this.setState({routeData: null})\r\n        const url = \"https://allin1ship.herokuapp.com/defaultRouteDisplay/\" + document.getElementById(\"selectRoute\").value;\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            this.setState({routeData: json, routeTableData: []})\r\n            console.log(json);\r\n            //this.getTasks(json.map((obj) => obj.id))\r\n        }).then(() => this.setRouteTableData())\r\n        //.then(() => this.getTasks(this.state.routeData.map(obj => obj.id)))\r\n        //move insidefetchstops?.then(() => this.setRouteTableData())\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    getDrivers = () => {\r\n        fetch(\"https://allin1ship.herokuapp.com/getDrivers\")\r\n        .then(response => response.json())\r\n        .then(json => this.setState({drivers: json}))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    getVehicles = () => {\r\n        fetch(\"https://allin1ship.herokuapp.com/getVehicles\")\r\n        .then(response => response.json())\r\n        .then(json => this.setState({vehicles: json}))\r\n        .catch(err => console.log(err))\r\n    }    \r\n\r\n    getRoutes = () => {\r\n        fetch(\"https://allin1ship.herokuapp.com/getNumberRoutes\")\r\n        .then(response => response.json())\r\n        .then(json => this.setState({routes: json}))\r\n        .then(e => console.log(this.state.routes))\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getVehicles()\r\n        this.getDrivers()\r\n        this.getRoutes()\r\n        this.getCustomersData()\r\n        this.getNewScheduleNumber()\r\n    }\r\n\r\n    onSuccessfulPost = () => {\r\n        alert('all successfully posted')\r\n    }\r\n \r\n    \r\n    postStopTask = (tasks, schedule_stop_id) => {\r\n        console.log('poststoptask running1 tasks: ', tasks);\r\n        if (!tasks) return;\r\n        const taskArray = tasks.replace(/\\r\\n/g,\"\\n\").split(\"\\n\").filter(line => line);\r\n        console.log(taskArray, schedule_stop_id);\r\n        for (let i=0;i<taskArray.length;i++) {\r\n            fetch(`https://allin1ship.herokuapp.com/postStopTask/${schedule_stop_id}`, {\r\n                method: \"POST\",  \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({task: taskArray[i]})\r\n            }).then(function(response) {\r\n                console.log('stop_task successfully posted', response)\r\n                //this.onSuccessfulPost()\r\n            })\r\n        }\r\n    }\r\n\r\n    postScheduleStops = (i) => {\r\n        //for line in taskbox, run this.postStopTask(task, schedule_stop_id)\r\n        const postStopData = {\r\n            stopNumber:  document.getElementById(`stopNumber${i+1}`).innerText,\r\n            scheduleId: `${this.state.newScheduleNumber}`, ////where to get scheduleId from??\r\n            customerId: document.getElementById(`customerSelect${i+1}`).value// in state needs to be set from dropdown value?\r\n        } \r\n        console.log('handlesubmitstop', JSON.stringify(postStopData));\r\n        fetch(\"https://allin1ship.herokuapp.com/postScheduleStops\", {\r\n            method: \"POST\",  \r\n            headers: {\r\n                \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(postStopData)\r\n        }).then((response) => {\r\n            if(response.ok) {\r\n                return response.json()\r\n            }\r\n            else {throw new Error(response.statusText) }\r\n/*\r\n            console.log('sched_stop successfully posted');\r\n            this.postStopTask(stopData.tasks)\r\n            return response.json();*/\r\n    \r\n        }).then(json => this.postStopTask(document.getElementById(`tasks${i+1}`).value, json))\r\n    }\r\n\r\n\r\n    postSchedule = () => {\r\n        const postData = {\r\n            selectedDefaultRoute: this.state.selectedRoute,\r\n            selectedDate: this.state.selectedDate,\r\n            selectedDriver: this.state.selectedDriver,\r\n            selectedVehicle: this.state.selectedVehicle,\r\n            selectedDropOffInfo: this.state.selectedDropOffInfo\r\n        }\r\n        console.log('handlesubmit', JSON.stringify(postData));\r\n        fetch(\"https://allin1ship.herokuapp.com/postSchedule\", {\r\n            method: \"POST\",  \r\n            headers: {\r\n                \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(postData)\r\n        }).then((response) => {\r\n            //for each row in state.routeStopsData\r\n            if (response.ok) {\r\n                \r\n                for (let i=0;i<this.state.routeTableData.length;i++) {\r\n                    this.postScheduleStops(i)\r\n                }\r\n                alert('schedule successfully posted')\r\n        }\r\n        })\r\n    }\r\n\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.postSchedule();\r\n        /*for each row in state.routeStopsData\r\n        for (let i=0;i<this.state.routeTableData.length;i++) {\r\n        this.postScheduleStops(i)\r\n        }*/\r\n    }\r\n\r\n    handleDrag = (e) => {\r\n        e.preventDefault()\r\n        console.log('draging', e.currentTarget.id);\r\n        this.setState({dragId: e.currentTarget.id})\r\n    }\r\n\r\n    handleDragOver = (e) => {\r\n        console.log('handledragover', e.currentTarget.id);\r\n        e.preventDefault()\r\n        e.stopPropogation()\r\n    }\r\n    handleDrop = (e) => {\r\n        e.preventDefault()\r\n        e.stopPropogation()\r\n        const { routeData, dragId } = this.state;\r\n        console.log('handleDrop', routeData, e.currentTarget.id, dragId);\r\n        const dragValue = parseInt(dragId)\r\n        const dropValue = parseInt(e.currentTarget.id)\r\n\r\n        const dragRow = routeData.find((route) => route.stop_number === dragValue)\r\n        const dropRow = routeData.find((route) => route.stop_number === dropValue)\r\n        console.log(dragValue, dropValue, dragRow, dropRow);\r\n\r\n        let newRouteData = routeData\r\n        newRouteData.forEach((route) => {\r\n            if (route.stop_number === dragValue) {\r\n                console.log(dragRow, dropRow);\r\n                route.customer_id = dropRow.customer_id\r\n                route.customer_name =dropRow.customer_name\r\n                route.address = dropRow.address\r\n            } \r\n            if (route.stop_number === dropValue) {\r\n                console.log(route.stop_number, dropValue, dragRow);\r\n                route.customer_id = dragRow.customer_id\r\n                route.customer_name =dragRow.customer_name\r\n                route.address = dragRow.address\r\n            }\r\n        });\r\n    /*handleDropB = (e) => {\r\n        const { routeData, dragId } = this.state;\r\n        console.log('handleDrop', dragId, e.currentTarget.id);\r\n        const dragRow = routeData.find((route) => route.id === dragId)\r\n        const dropRow = routeData.find((route) => route.id === e.currentTarget.id)\r\n<<<<<<< HEAD\r\n        const dragRowOrder = dragRow.id;\r\n        const dropRowOrder = dropRow.id;\r\n=======\r\n        const dragRowOrder = dragRow.id;\r\n        const dropRowOrder = dropRow.id;\r\n>>>>>>> c6d9a89524a9be8af0a6d1cf474c5f664360d597\r\n        const newRowState = routeData.map((route) => {\r\n            if (route.id === dragId) {\r\n                route.id = dropRowOrder;\r\n            }\r\n            if (route.id === e.currentTarget.id) {\r\n                route.id = dragRowOrder;\r\n            }\r\n            return route\r\n        })\r\n<<<<<<< HEAD\r\n=======\r\n>>>>>>> c6d9a89524a9be8af0a6d1cf474c5f664360d597\r\n        this.setState({routeData: newRowState})\r\n    }\r\n*/\r\n        //newRouteData.forEach((route) => route.stop_number === dropValue ? route.stop_number = dragValue : console.log('hello again', dragValue, route.stop_number, dropValue));\r\n        /*\r\n                route.stop_number = e.currentTarget.id\r\n            }\r\n            if (route.stop_number === e.currentTarget.id) {\r\n                route.stop_number = dragId\r\n            }\r\n            return route\r\n        )*/\r\n        /*const newRouteData = routeData.forEach((route) => {\r\n            if (route.stop_number === dragId) {\r\n                console.log('hello', route.stop_number, e.currentTarget.id);\r\n                route.stop_number = e.currentTarget.id\r\n            }\r\n            if (route.stop_number === e.currentTarget.id) {\r\n                route.stop_number = dragId\r\n            }\r\n            return route\r\n        })*/ /*\r\n        for (let i=0;i<routeData.length;i++) {\r\n            const newRouteData = [];\r\n            if (routeData[i].stop_number === dragId) {\r\n                console.log('hello', route[i].stop_number, e.currentTarget.id);\r\n                newRouteData.push\r\n                route[i].stop_number = e.currentTarget.id\r\n            }\r\n            if (route.stop_number === e.currentTarget.id) {\r\n                route.stop_number = dragId\r\n            }\r\n        }*/\r\n        console.log(newRouteData);\r\n        this.setState({routeData: newRouteData}, this.setRouteTableData)\r\n    }\r\n/*\r\n    //this.state.routeData[i].comments\r\n    handleCommentChanges = () => {\r\n        for (let i=0;i<this.state.routeData.length;i++) {\r\n            console.log(document.getElementById(`${i}`));\r\n            let commentsObj = {\r\n                key: i,\r\n                comment: 'document.getElementById(`${i}`).value'\r\n            }\r\n        \r\n            console.log(commentsObj);\r\n            fetch(`http://192.168.1.137:8000/postChangedComments/${this.state.selectedRoute}`, {\r\n                method: \"POST\",  \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(commentsObj)\r\n            }).then(function(response) {\r\n                console.log(response)\r\n                alert('comment successfully posted');\r\n                return response.json();\r\n        })\r\n    }\r\n    } */\r\n    /*handleCommentButton = (stop_number, comments) => {\r\n            const commentsObj = {\r\n                key: stop_number,\r\n                comment: comments \r\n            }\r\n        \r\n            console.log(commentsObj);\r\n            fetch(`https://allin1ship.herokuapp.com/postChangedComments/${this.state.selectedRoute}`, {\r\n                method: \"POST\",  \r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify(commentsObj)\r\n            }).then(response =>  {\r\n                console.log(response)\r\n                return response.json();\r\n        })\r\n    }*/\r\n/*\r\n    handleComment = (e) => {\r\n        const commentsObj = {\r\n            key: e.target.id,\r\n            comment: e.target.value\r\n        }\r\n    \r\n        console.log(commentsObj);\r\n        fetch(`http://192.168.1.137:8000/postChangedComments/${this.state.selectedRoute}`, {\r\n            method: \"POST\",  \r\n            headers: {\r\n                \"Content-Type\": \"application/json\"},\r\n            body: JSON.stringify(commentsObj)\r\n        }).then(response =>  {\r\n            console.log(response)\r\n            return response.json();\r\n    })\r\n}*/\r\n\r\n    handleRouteChange = (e) => {\r\n        //console.log(document.getElementById(\"selectRoute\").value)\r\n        this.setState({selectedRoute: e.target.value})\r\n        this.getRouteData()\r\n    }\r\n\r\n    handleTextChange = (e) => {\r\n        this.setState({selectedDropOffInfo: e.target.value})\r\n    }\r\n\r\n    handleDriverChange = (e) => {\r\n        console.log(this.state);\r\n        e.target.value !== 'none' && this.setState({selectedDriver: e.target.value})\r\n    }\r\n\r\n    handleVehicleChange = (e) => {\r\n        console.log(this.state);\r\n        this.setState({selectedVehicle: e.target.value})        \r\n    }\r\n\r\n    handleDateChange = (e) => {\r\n        let selectedDate = e.target.value;\r\n        this.setState({selectedDate})     \r\n    }\r\n    render() {\r\n\r\n        /*const optionsDrivers = this.state.drivers && this.state.drivers.map((driver) => \r\n            <option key={driver.driver}>{driver.driver}</option>\r\n        );*/\r\n\r\n        const optionsRoutes = this.state.routes && this.state.routes.map((route) => \r\n            <option key={route.id} value={route.id}>{route.id} - {route.route_name}</option>\r\n        );\r\n\r\n        const optionsVehicles = this.state.vehicles && this.state.vehicles.map((vehicle) => \r\n            <option key={vehicle.vehicle}>{vehicle.vehicle}</option>\r\n        );\r\n\r\n        const todaysDate = new Date().toISOString().split('T')[0];\r\n\r\n        return <div style={{padding: '15px'}}>            \r\n             <main className='CreateSchedule'>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <br/><legend>New Schedule #{this.state.newScheduleNumber}</legend><br/>\r\n                    <label htmlFor=\"schedule-date\">Date:</label><br/>\r\n                    <input type=\"date\" id=\"schedule-date\" defaultValue={todaysDate} required onChange={this.handleDateChange}/><br/><br/>\r\n                   \r\n                    DRIVER:<br/>\r\n                    <select onChange={this.handleDriverChange}>\r\n                    <option value=\"none\" selected disabled hidden> \r\n                        Select a Driver \r\n                    </option>\r\n                    <option value=\"Jonathan\">Jonathan</option>\r\n                    <option value=\"Will\">Will</option>\r\n                    <option value=\"Alex\">Alex</option>\r\n                    <option value=\"Driver\">Driver</option>       \r\n                    <option value=\"Jeffrey\">Jeffrey</option>                                     \r\n                    </select><br/>\r\n                    <br/>\r\n                    VEHICLE:{this.state.selectedVehicle}<br/>                    \r\n                    <select required onChange={this.handleVehicleChange}>\r\n                        <option value=\"none\" selected disabled hidden>\r\n                            Choose a Vehicle \r\n                        </option>\r\n                        {optionsVehicles}\r\n                        <option value={() => document.getElementById('new-vehicle').value} > \r\n                            New Vehicle\r\n                        </option>\r\n                        {/*<option value='newVehicle'>New Vehicle</option>*/}\r\n                    </select><br/><label htmlFor='new-vehicle'>new vehicle</label><br/>\r\n                    <input id='new-vehicle' onChange={this.handleVehicleChange} ></input><br/><br/>\r\n                    DROP OFF INFO:<br/>\r\n                    <textarea \r\n                    onChange={this.handleTextChange}\r\n                    name='comment'\r\n                    rows=\"8\" cols=\"50\"\r\n                    >Thank you for the hard work today, it is greatly appreciated.\r\n\r\n                    You’re the front line workers in our company and your hard work shows!\r\n                    \r\n                    Please park the van, near the office, if you cannot find parking you can always use the driveway at 740 Montgomery St,\r\n                    (The driveway is narrow so just be alert).\r\n                    \r\n                    Rest up, looking forward to seeing you at the next drive!</textarea><br/><br/>\r\n                    ROUTE:<br/> {/*drop down of number for each route_id from fetched data.*/}\r\n                    <select id='selectRoute' onChange={this.handleRouteChange}>\r\n                        <option value=\"\" selected disabled hidden>Choose Route</option>\r\n                        {optionsRoutes}\r\n                    </select><br/>\r\n                    <table>\r\n                        <thead>\r\n                            <tr><th>selected route #:{this.state.selectedRoute}</th></tr>\r\n                            {this.state.routeData && <tr>\r\n                                <th>Stop #</th>\r\n                                <th>Address</th>\r\n                                <th className='editable'>Tasks-Each New Line is a New Task.</th>\r\n                            </tr>}\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.routeTableData}\r\n                        </tbody>\r\n                       <button type='button' onClick={() => this.addRouteRow()}>add row</button>\r\n                    </table>\r\n\r\n\r\n                    <button type='submit'>SUBMIT</button><br/>\r\n                </form>\r\n                \r\n                {/*<Link to='/create-route'><button>CREATE NEW ROUTE</button></Link>*/}\r\n            </main>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default CreateSchedule;\r\n","C:\\Users\\mushk\\Allin1Ship\\admin-app-allin1ship\\src\\components\\EditSchedule.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":171,"column":15,"nodeType":"76","messageId":"77","endLine":171,"endColumn":29},{"ruleId":"74","severity":1,"message":"78","line":2,"column":10,"nodeType":"76","messageId":"77","endLine":2,"endColumn":14},{"ruleId":"74","severity":1,"message":"79","line":2,"column":16,"nodeType":"76","messageId":"77","endLine":2,"endColumn":21},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'tableRouteData' is assigned a value but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Route' is defined but never used.","no-global-assign","no-unsafe-negation"]